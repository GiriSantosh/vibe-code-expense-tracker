{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api/expenses';\nexport const useExpenses = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [monthlySummary, setMonthlySummary] = useState([]);\n  const [categorySummary, setCategorySummary] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchExpenses = async (category, startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params = {};\n      if (category) params.category = category;\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await axios.get(API_BASE_URL, {\n        params\n      });\n      setExpenses(response.data);\n    } catch (err) {\n      setError('Failed to fetch expenses.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addExpense = async expense => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(API_BASE_URL, expense);\n      setExpenses(prev => [...prev, response.data]);\n      return response.data;\n    } catch (err) {\n      setError('Failed to add expense.');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteExpense = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      await axios.delete(`${API_BASE_URL}/${id}`);\n      setExpenses(prev => prev.filter(exp => exp.id !== id));\n    } catch (err) {\n      setError('Failed to delete expense.');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMonthlySummary = async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${API_BASE_URL}/summary`, {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      setMonthlySummary(response.data);\n    } catch (err) {\n      setError('Failed to fetch monthly summary.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchCategorySummary = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${API_BASE_URL}/category-summary`);\n      setCategorySummary(response.data);\n    } catch (err) {\n      setError('Failed to fetch category summary.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchExpenses();\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];\n    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];\n    fetchMonthlySummary(firstDayOfMonth, lastDayOfMonth);\n    fetchCategorySummary();\n  }, []);\n  return {\n    expenses,\n    monthlySummary,\n    categorySummary,\n    loading,\n    error,\n    fetchExpenses,\n    addExpense,\n    deleteExpense,\n    fetchMonthlySummary,\n    fetchCategorySummary\n  };\n};\n_s(useExpenses, \"9AXTQuCT/6GhxsU++Z78oKiBuiY=\");","map":{"version":3,"names":["useState","useEffect","axios","API_BASE_URL","useExpenses","_s","expenses","setExpenses","monthlySummary","setMonthlySummary","categorySummary","setCategorySummary","loading","setLoading","error","setError","fetchExpenses","category","startDate","endDate","params","response","get","data","err","console","addExpense","expense","post","prev","deleteExpense","id","delete","filter","exp","fetchMonthlySummary","fetchCategorySummary","today","Date","firstDayOfMonth","getFullYear","getMonth","toISOString","split","lastDayOfMonth"],"sources":["/home/santoshgiri/vibe-coding/PersonalExpenseTracker/expense-tracker-frontend/src/hooks/useExpenses.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Expense } from '../types/Expense';\nimport { ExpenseCategory } from '../types/ExpenseCategory';\n\ninterface MonthlySummary {\n  year: number;\n  month: number;\n  total: number;\n}\n\ninterface CategorySummary {\n  category: ExpenseCategory;\n  total: number;\n}\n\nconst API_BASE_URL = 'http://localhost:8080/api/expenses';\n\nexport const useExpenses = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [monthlySummary, setMonthlySummary] = useState<MonthlySummary[]>([]);\n  const [categorySummary, setCategorySummary] = useState<CategorySummary[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchExpenses = async (category?: ExpenseCategory, startDate?: string, endDate?: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params: any = {};\n      if (category) params.category = category;\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n\n      const response = await axios.get<Expense[]>(API_BASE_URL, { params });\n      setExpenses(response.data);\n    } catch (err) {\n      setError('Failed to fetch expenses.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addExpense = async (expense: Omit<Expense, 'id' | 'createdAt'>) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post<Expense>(API_BASE_URL, expense);\n      setExpenses((prev) => [...prev, response.data]);\n      return response.data;\n    } catch (err) {\n      setError('Failed to add expense.');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    setLoading(true);\n    setError(null);\n    try {\n      await axios.delete(`${API_BASE_URL}/${id}`);\n      setExpenses((prev) => prev.filter((exp) => exp.id !== id));\n    } catch (err) {\n      setError('Failed to delete expense.');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchMonthlySummary = async (startDate: string, endDate: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get<MonthlySummary[]>(`${API_BASE_URL}/summary`, {\n        params: { startDate, endDate },\n      });\n      setMonthlySummary(response.data);\n    } catch (err) {\n      setError('Failed to fetch monthly summary.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategorySummary = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get<CategorySummary[]>(`${API_BASE_URL}/category-summary`);\n      setCategorySummary(response.data);\n    } catch (err) {\n      setError('Failed to fetch category summary.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchExpenses();\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];\n    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];\n    fetchMonthlySummary(firstDayOfMonth, lastDayOfMonth);\n    fetchCategorySummary();\n  }, []);\n\n  return {\n    expenses,\n    monthlySummary,\n    categorySummary,\n    loading,\n    error,\n    fetchExpenses,\n    addExpense,\n    deleteExpense,\n    fetchMonthlySummary,\n    fetchCategorySummary,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}